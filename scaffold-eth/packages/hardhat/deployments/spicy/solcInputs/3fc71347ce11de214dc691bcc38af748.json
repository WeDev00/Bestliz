{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/Chat.sol": {
      "content": "//SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Smart contract for staking ERC-20 tokens\n * @author WeDev00\n * @notice This contract allows users to stake existing ERC-20 tokens\n */\ncontract ChatStaking {\n    \n    struct StakedTokens{\n        uint256 amount;\n        address tokenAddress;\n    }\n\n    //owner of this contract\n    address private owner;\n\n    //name of the event\n    string public name;\n\n    // ERC-20 token addresses to be staked\n    IERC20[] public tokens;\n\n    uint256 public amountToStake;\n\n    // Staking duration in seconds\n    uint256 public stakingDuration;\n\n    // Mapping that stores the amount in staking for each user\n    mapping(address => StakedTokens) public staked;\n\n    // Mapping that stores if a user exist in our staked mapping\n    mapping(address=>bool) public haveStaked;\n\n    // Mapping that stores the staking start timestamp for each user\n    mapping(address => uint256) public startTime;\n\n    // Event emitted when a user stakes tokens\n    event Staked(address indexed user, uint256 amount);\n\n    // Event issued when a user withdraws tokens\n    event Unstaked(address indexed user, uint256 amount);\n\n\n    /**\n     * @dev Contract's constructor\n     * @param _tokens ERC-20 token addresses to be staked\n     * @param _stakingDuration Staking duration in seconds\n     */\n    constructor(\n        address _owner,\n        string memory _name,\n         IERC20[2]  memory _tokens,\n        uint256 _stakingDuration\n    ) {\n        owner=_owner;\n        tokens = _tokens;\n        stakingDuration = _stakingDuration;\n        name=_name;\n    }\n\n\n    \n    function getName() public view returns (string memory){\n        return name;\n    }\n\n    function setName(string memory _name) public onlyOwner {\n        name=_name;\n    }\n\n    function getTokens() public view returns (IERC20[] memory){\n        return tokens;\n    }\n\n    function setTokens(IERC20[] memory _tokens) public onlyOwner{\n        tokens=_tokens;\n    }\n\n    function setHomeToken(address _homeTeamAddress) public onlyOwner{\n        tokens[0]=IERC20(_homeTeamAddress);\n    }\n\n    function setGuestToken(address _guestTeamAddress) public onlyOwner{\n        tokens[1]=IERC20(_guestTeamAddress);\n    }\n\n    function getAmountToStake() public view returns(uint256){\n        return amountToStake;\n    }\n\n    function modifyAmountToStake(uint256 newAmount) public onlyOwner{\n        amountToStake=newAmount;\n    }\n\n    function getStakingDuration() public view returns(uint256){\n        return stakingDuration;\n    }\n\n    function modifyStakingDuration(uint256 newDuration) public onlyOwner{\n        stakingDuration=newDuration;\n    }\n\n\n    function getAmountOfTokensStakedByAddress(address user) public view returns(StakedTokens memory){\n        return staked[user];\n    }\n\n\n    /**\n     * @notice Function for staking tokens\n     * @param _amount Amount of tokens to be staked\n     * @param isHomeTeamToken Boolean indicating whether the tokens to be staked are of home team or guest team\n     */\n    function stake(uint256 _amount,bool isHomeTeamToken) external {\n        require(_amount >= amountToStake, \"Errore: importo non valido\");\n        \n        \n        // Transfer the tokens from the user's wallet to the contract\n        if(isHomeTeamToken){\n        tokens[0].transferFrom(msg.sender, address(this), _amount);\n        staked[msg.sender].tokenAddress=address(tokens[0]);\n        }\n        else {\n            tokens[1].transferFrom(msg.sender,address(this),_amount);\n            staked[msg.sender].tokenAddress=address(tokens[1]);\n        }\n\n        // Updates the user's staking status\n        staked[msg.sender].amount += _amount;\n        haveStaked[msg.sender]=true;\n        startTime[msg.sender] = block.timestamp;\n\n        emit Staked(msg.sender, _amount);\n    }\n\n\n    /**\n     * @notice Function for staking tokens\n     * @return boolean indicating whether the user has staked the correct amount of tokens\n     */\n    function isAllowed() public view returns(bool){\n        require(haveStaked[msg.sender],\"Error:sender never staked some tokens\");\n        return staked[msg.sender].amount >= amountToStake;\n    }\n\n\n    /**\n     * @notice Function for withdrawing tokens\n     */\n    function unstake() external {\n        require(block.timestamp >= startTime[msg.sender] + stakingDuration, \"Errore: periodo di staking non ancora terminato\");\n        require(haveStaked[msg.sender],\"Error:sender never staked some tokens\");\n        // Unstake your tokens\n        if(IERC20(staked[msg.sender].tokenAddress)==tokens[0])\n        tokens[0].transfer(msg.sender, staked[msg.sender].amount );\n        else{\n            tokens[1].transfer(msg.sender, staked[msg.sender].amount );\n        }\n\n        // Updates the user's staking status\n        staked[msg.sender].amount = 0;\n        startTime[msg.sender] = 0;\n\n        emit Unstaked(msg.sender, staked[msg.sender].amount);\n    }\n\n    /**\n     * @notice Function for users slashing in case of disrespectuf behavior\n     * @param userToSlash address of user to slash\n     */\n    function slashUser(address userToSlash) public onlyOwner{\n        IERC20(staked[userToSlash].tokenAddress).transfer(owner,staked[userToSlash].amount);\n        staked[userToSlash].amount=0;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Errore: solo il proprietario puo' eseguire questa funzione\");\n        _;\n    }\n\n}\n"
    },
    "contracts/ChatFactory.sol": {
      "content": "//SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\n// Import smart contract for staking\nimport \"./Chat.sol\";\n\n/**\n * @title Factory contract for the creation of staking contracts\n * @author WeDev00\n * @notice This contract allows new staking contracts to be created for several ERC-20 tokens\n * @dev The contract uses smart contract staking to create new contracts\n */\ncontract StakingFactory {\n\n    // Owner's address\n    address public owner;\n\n    //stores deployed chats\n    address[] deployedContract;\n\n    // Event issued when a new staking contract is created\n    event StakingContractCreated(IERC20[2] indexed tokens, address stakingContract);\n\n    /**\n     * @dev Contract's constructor\n     */\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @notice Function to create a new staking contract\n     * @param homeTeamFanToken Address of the ERC-20 token home club to be staked\n     * @param guestTeamFanToken Address of the ERC-20 token guest club to be staked\n     * @param _stakingTime Staking duration in seconds\n     * @return _stakingContract Address of the new staking contract\n     */\n    function createStakingContract(\n        address homeTeamFanToken,\n        address guestTeamFanToken,\n        string memory eventName,\n        uint256 _stakingTime\n    ) external onlyOwner returns (address _stakingContract) {\n         IERC20[2] memory tokenToStake=[IERC20(homeTeamFanToken),IERC20(guestTeamFanToken)];\n        // Create a new staking contract\n        ChatStaking stakingContract = new ChatStaking(owner,eventName,tokenToStake, _stakingTime);\n\n        // Store the address of the new staking contract\n        deployedContract.push(address(stakingContract));\n\n        // Issue an event to notify the creation of the new contract\n        emit StakingContractCreated(tokenToStake,address(stakingContract));\n\n        return address(stakingContract);\n    }\n\n    /**\n     * @notice Function to change the owner of the contract\n     * @param _newOwner New owner's address\n     */\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Error: new owner isn't valid\");\n\n        owner = _newOwner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Errore: solo il proprietario puo' eseguire questa funzione\");\n        _;\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}